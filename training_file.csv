QUESTION,QUERY
"Get the product_id ,product_name,category_price from product table where the price is more than thousand","SELECT DISTINCT product_id, product_name, category, price FROM product_table WHERE price > 1000 ORDER BY price DESC limit 7"
Retrieve the names and prices of all products in the 'products' table,"SELECT product_name, price FROM product_table"
Get the total number of orders placed,SELECT COUNT(*) AS total_orders FROM order_table
Show the distinct payment methods used by customers,SELECT DISTINCT payment_method FROM transaction_table
Fetch the order date and total amount for orders above $500,"SELECT order_date, total_price FROM order_table WHERE total_price > 500"
List all customers from Adamsbury,SELECT * FROM customer_table WHERE address LIKE '%Adamsbury%
Get the names of all customers from the 'customers' table,"SELECT first_name, last_name FROM customer_table"
Show the total number of orders in the 'orders' table,SELECT COUNT(*) AS total_orders FROM order_table
Fetch the distinct product categories from the 'products' table,SELECT DISTINCT category FROM product_table
Retrieve the order date and total amount for orders over $1000 from the 'orders' table,"SELECT order_date, total_price FROM order_table WHERE total_price > 1000"
List all customers from the 'customers' table who are located in New York,SELECT * FROM customer_table WHERE address LIKE '%New York%'
Get the product names and their prices from the 'products' table where the price is greater than $50,"SELECT product_name, price FROM product_table WHERE price > 50"
Show the order IDs and shipping addresses from the 'orders' table where the order status is 'Shipped',"SELECT o.order_id, c.address AS shipping_address FROM order_table o JOIN customer_table c ON o.customer_id = c.customer_id WHERE o.order_status = 'Shipped'"
"""Fetch the customer names and phone numbers from the 'customers' table where the STATE is 'TEXAS'","SELECT DISTINCT first_name, last_name, address FROM customer_table WHERE address LIKE '%TX%'"
Retrieve the product names and stock quantities from the 'products' table where the stock is less than 10,SELECT * FROM product_table WHERE stock_quantity > 10
"List all orders from the 'orders' table placed after January 1, 2024",SELECT * FROM order_table WHERE order_date > '2024-01-01'
Get the first and last name of customers who have placed more than 5 orders from the 'customers' and 'orders' tables(HIGHEST TO LOWEST ORDERS),"SELECT c.first_name, c.last_name FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.first_name, c.last_name HAVING COUNT(o.order_id) > 5 ORDER BY COUNT(o.order_id) DESC"
Fetch the product names and their categories for products priced between $20 and $500 from the 'products' table,"SELECT DISTINCT product_name, category, price FROM product_table WHERE price BETWEEN 20 AND 100"
Show the total revenue from the 'orders' table,SELECT SUM(total_price) AS total_revenue FROM order_table
Get the most expensive product from the 'products' table,"SELECT product_name, price FROM product_table WHERE price = (SELECT MAX(price) FROM product_table)"
List the top 5 most recent orders from the 'orders' table,SELECT DISTINCT * FROM order_table ORDER BY order_date DESC LIMIT 5
Get the customer names and the total amount of their orders from the 'customers' and 'orders' tables,"SELECT DISTINCT c.first_name, c.last_name, SUM(o.total_price) AS total_order_amount FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id"
"Fetch the order ID, product name, and quantity for each product in an order from the 'orders', 'order_details', and 'products' tables","SELECT DISTINCT o.order_id, p.product_name, o.quantity FROM order_table o JOIN product_table p ON o.product_id = p.product_id;"
Show the customers who haven’t placed any orders.,"SELECT c.first_name, c.last_name FROM customer_table c LEFT JOIN order_table o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL"
Get the most popular product (the one ordered the most) and how many times it was ordered,"SELECT p.product_name, COUNT(o.order_id) AS order_count FROM product_table p JOIN order_table o ON p.product_id = o.product_id GROUP BY p.product_name ORDER BY order_count DESC LIMIT 1"
Fetch the customers and their most recent order date,"SELECT c.first_name, c.last_name, MAX(o.order_date) AS most_recent_order_date FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.first_name, c.last_name"
Get the total revenue per product category,"SELECT p.category, SUM(o.total_price) AS total_revenue FROM product_table p JOIN order_table o ON p.product_id = o.product_id GROUP BY p.category"
List all products that have never been ordered,SELECT  DISTINCT p.product_name FROM product_table p LEFT JOIN order_table o ON p.product_id = o.product_id WHERE o.order_id IS NULL
Fetch the top 3 customers who have spent the most money.,"SELECT c.first_name, c.last_name, SUM(o.total_price) AS total_spent FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id LIMIT 3"
Get the average order value for each customer,"SELECT c.first_name, c.last_name, AVG(o.total_price) AS average_order_value FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id"
Show the products along with the total quantity ordered and total revenue generated for each product,"SELECT p.product_name, SUM(o.quantity) AS total_quantity_ordered, SUM(o.total_price) AS total_revenueFROM product_table p JOIN order_table o ON p.product_id = o.product_id"
Get the monthly revenue from the 'orders' table,"SELECT strftime('%Y-%m', order_date) AS month, SUM(total_price) AS monthly_revenue FROM order_table GROUP BY month"
"Fetch the highest, lowest, and average transaction amounts from the 'orders' table","SELECT MAX(total_price) AS highest_amount, MIN(total_price) AS lowest_amount, AVG(total_price) AS average_amount FROM order_table"
List all orders along with the customer names and product names,"SELECT o.order_id, c.first_name, c.last_name, p.product_name FROM order_table o ON c.customer_id = o.customer_id"
List the customers who made the highest-value single transaction and do not repeat the same transaction,"SELECT DISTINCT c.first_name, c.last_name, o.total_price FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id"
Get the total revenue and total number of transactions per year,"SELECT DISTINCT strftime('%Y', order_date) AS year, SUM(total_price) AS total_revenue, COUNT(*) AS total_transactions FROM order_table GROUP BY year"
Find the customers who have spent more than $5000 in total transactions,"SELECT c.first_name, c.last_name, SUM(o.total_price) AS total_spent FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING total_spent > 5000"
Get the average order value for each month,"SELECT strftime('%Y-%m', order_date) AS month, AVG(total_price) AS average_order_value FROM order_table GROUP BY month"
Fetch the top fivety highest-value transactions with customer details,"SELECT DISTINCT c.first_name, c.last_name, o.total_price FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id ORDER BY o.total_price DESC LIMIT 50"
Fetch the top 5 highest-value transactions with customer details,"SELECT DISTINCT c.first_name, c.last_name, o.total_price FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id ORDER BY o.total_price DESC LIMIT 5"
Find the customers who placed the most transactions,"SELECT c.first_name, c.last_name, COUNT(o.order_id) AS total_transactions FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY total_transactions DESC LIMIT 10"""
Get the total revenue and number of transactions for each product category and not for only one product category but all product categories,"SELECT p.category, SUM(o.total_price) AS total_revenue, COUNT(o.order_id) AS transaction_count FROM product_table p JOIN order_table o ON p.product_id = o.product_id GROUP BY p.category"
Identify the top 5 customers with the highest lifetime value (total spending) and their most recent order date,"SELECT c.first_name, c.last_name, SUM(o.total_price) AS total_spending, MAX(o.order_date) AS most_recent_order_date FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY total_spending DESC LIMIT 5"
Find the product with the highest revenue over the past 6 months,"SELECT p.product_name, SUM(o.quantity * p.price) AS total_revenue FROM product_table p JOIN order_table o ON p.product_id = o.product_id WHERE o.order_date >= date('now', '-6 months') GROUP BY p.product_name ORDER BY total_revenue DESC LIMIT 1"
"Get the average order value and total orders per customer, only for customers who have placed more than 3 orders","SELECT c.first_name, c.last_name, AVG(o.total_price) AS average_order_value,COUNT(o.order_id) AS total_orders FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) > 3"
"Show the revenue trend over the past year, broken down by month","SELECT STRFTIME('%Y-%m', order_date) AS month, SUM(total_price) AS total_revenue FROM order_table WHERE order_date >= date('now', '-1 year') GROUP BY month ORDER BY month"
Find the products that have been ordered less than 1500 times in total,SELECT p.product_name FROM product_table p JOIN order_table o ON p.product_id = o.product_id GROUP BY p.product_name HAVING COUNT(o.order_id) < 1500
Identify orders that include more than 3 different products,SELECT order_id FROM order_table GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 3
Find customers who haven’t ordered anything in the past 12 months,"SELECT * FROM customer_table WHERE customer_id NOT IN (SELECT customer_id FROM order_table WHERE order_date >= date('now', '-1 year'))"
Get the most frequently ordered product along with the total quantity ordered,"SELECT p.product_name,SUM(o.quantity) AS total_quantity_ordered FROM product_table AS p JOIN order_table AS o ON p.product_id = o.product_id GROUP BY p.product_name ORDER BY total_quantity_ordered DESC LIMIT 1"""
Calculate the revenue contribution percentage of each product category,"SELECT p.category,SUM(o.quantity * p.price) AS category_revenue,(SUM(o.quantity * p.price) * 100.0) / (SELECT SUM(quantity * price) FROM order_table AS o JOIN product_table AS p ON o.product_id = p.product_id) AS revenue_percentage FROM product_table AS p JOIN order_table AS o ON p.product_id = o.product_id GROUP BY p.category"
Find the average time (in days) between a customer’s orders,SELECT AVG(JULIANDAY(T2.order_date) - JULIANDAY(T1.order_date)) AS avg_days_between_orders FROM order_table AS T1 INNER JOIN order_table AS T2 ON T1.customer_id = T2.customer_id AND T1.order_id < T2.order_id  -- Ensure we compare earlier to later orders WHERE T2.order_date IS NOT NULL AND T1.order_date IS NOT NULL  -- Handle potential NULLs
Identify the day of the week with the highest average order value,SELECT AVG(JULIANDAY(T2.order_date) - JULIANDAY(T1.order_date)) AS avg_days_between_orders FROM order_table AS T1 INNER JOIN order_table AS T2 ON T1.customer_id = T2.customer_id AND T1.order_id < T2.order_id  -- Ensure we compare earlier to later orders WHERE T2.order_date IS NOT NULL AND T1.order_date IS NOT NULL  -- Handle potential NULLs
List customers who ordered the same product more than once,"SELECT DISTINCT c.first_name, c.last_name, p.product_name FROM customer_table AS c JOIN order_table AS o ON c.customer_id = o.customer_id JOIN product_table AS p ON o.product_id = p.product_id GROUP BY c.customer_id, p.product_id HAVING COUNT(o.order_id) > 1"
Get the total number of orders and total revenue for each quarter in the last 2 years,"SELECT STRFTIME('%Y-%m-%d', order_date) AS quarter, COUNT(order_id) AS total_orders,SUM(total_price) AS total_revenue FROM order_table WHERE order_date >= date('now', '-2 years') GROUP BY STRFTIME('%Y-%m', order_date)"
Identify customers who placed an order for the first time in the last 30 days,"SELECT c.first_name, c.last_name FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id  WHERE o.order_date >= date('now', '-30 days') GROUP BY c.customer_id HAVING MIN(o.order_date) >= date('now', '-30 days')"
Identify customers who haven’t placed an order in the last 6 months,"SELECT c.first_name, c.last_name FROM customer_table c WHERE c.customer_id NOT IN (SELECT DISTINCT customer_id FROM order_table WHERE order_date >= date('now', '-6 months'))"
Get the average order frequency (in days) per customer and identify those whose frequency has dropped below average,"SELECT AVG(days_between_orders) AS average_frequency FROM (SELECT T1.customer_id,AVG(JULIANDAY(T2.order_date) - JULIANDAY(T1.order_date)) AS days_between_orders FROM order_table AS T1 INNER JOIN order_table AS T2 ON T1.customer_id = T2.customer_id AND T1.order_id < T2.order_id GROUP BY T1.customer_id)"
"Segment customers into high, medium, and low spenders based on their total spending","SELECT c.customer_id, SUM(o.total_price) AS total_spending FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id"
Group customers by order frequency and total spending,"SELECT c.customer_id, COUNT(o.order_id) AS order_frequency, SUM(o.total_price) AS total_spending FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id"
Find slow-moving products — those with low total sales over the past year,"SELECT DISTINCT p.product_id,p.product_name,SUM(o.quantity) AS total_quantity_ordered,SUM(o.total_price) AS total_revenue FROM product_table p LEFT JOIN order_table o ON p.product_id = o.product_id WHERE o.order_date >= strftime('%Y-%m-%d %H:%M:%S', date('now', '-1 year'))  -- Filter for orders in the past year GROUP BY p.product_id,p.product_name ORDER BY total_revenue ASC, total_quantity_ordered ASC LIMIT 10"
Identify overstocked products — products with high stock but low sales,"SELECT p.product_id,p.product_name,p.stock_quantity,SUM(o.quantity) AS total_quantity_ordered,SUM(o.total_price) AS total_revenue FROM product_table p LEFT JOIN order_table o ON p.product_id = o.product_id WHERE o.order_date >= strftime('%Y-%m-%d %H:%M:%S', date('now', '-1 year')) GROUP BY p.product_id,p.product_name, p.stock_quantity HAVING total_quantity_ordered < p.stock_quantity * 0.1  -- Consider products with less than 10% of stock sold as overstocked ORDER BY p.stock_quantity DESC,total_revenue ASC"
Determine the reorder point for each product — when stock is running low based on past demand,"SELECT p.product_id, p.product_name, AVG(o.quantity) AS average_daily_demand, p.lead_time FROM product_table p JOIN order_table o ON p.product_id = o.product_id WHERE o.order_date >= date('now', '-30 days') GROUP BY p.product_id, p.product_name, p.lead_time ORDER BY average_daily_demand ASC LIMIT 10"
Identify customers who used to order frequently but haven’t ordered in the last 3 months,"SELECT c.customer_id, c.first_name, c.last_name FROM customer_table c WHERE c.customer_id IN (SELECT o.customer_id FROM order_table o WHERE o.order_date < date('now','-3 months') GROUP BY o.customer_id HAVING COUNT(o.order_id) >= 3) AND c.customer_id NOT IN (SELECT o.customer_id FROM order_table o WHERE o.order_date >= date('now', '-3 months'))"
Find VIP customers — those with high order frequency and high total spending,"SELECT c.customer_id, c.first_name, c.last_name, COUNT(o.order_id) AS order_frequency, SUM(o.total_price) AS total_spending FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) > (SELECT AVG(order_count) FROM (SELECT COUNT(order_id) AS order_count FROM order_table GROUP BY customer_id)) AND SUM(o.total_price) > (SELECT AVG(total_spent) FROM (SELECT SUM(total_price) AS total_spent FROM order_table GROUP BY customer_id)) ORDER BY total_spending DESC, order_frequency DESC)"
Track product demand — show weekly sales trends for each product,"SELECT STRFTIME('%Y-%W', o.order_date) AS week_number,p.product_name, SUM(o.quantity) AS total_quantity_sold FROM order_table o JOIN product_table p ON o.product_id = p.product_id GROUP BY week_number, p.product_name ORDER BY week_number, p.product_name"
Identify products with the highest growth in sales over the past 6 months,"SELECT p.product_name,SUM(CASE WHEN o.order_date >= date('now', '-6 months') THEN o.quantity ELSE 0 END) AS recent_sales,SUM(CASE WHEN o.order_date >= date('now', '-12 months')AND o.order_date < date('now', '-6 months') THEN o.quantity ELSE 0 END) AS previous_sales FROM product_table p JOIN order_table o ON p.product_id = o.product_id GROUP BY p.product_name"
Calculate the profit margin for each product based on total revenue and cost,"SELECT p.product_name,SUM(o.total_price) AS total_revenue,SUM(o.quantity * p.price) AS total_cost,(SUM(o.total_price) - SUM(o.quantity * p.price)) * 100.0 / SUM(o.total_price) AS profit_margin FROM product_table p JOIN order_table o ON p.product_id = o.product_id GROUP BY p.product_id, p.product_name "
Find the most profitable customers (highest total profit generated from their orders,"SELECT c.customer_id,c.first_name,c.last_name,SUM(o.total_price - (o.quantity * p.price)) AS total_profit FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id JOIN product_table p ON o.product_id = p.product_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY total_profit DESC LIMIT 10 "
Calculate average lead time by delivery status,"SELECT d.delivery_status,AVG(JULIANDAY(d.delivery_date) - JULIANDAY(o.order_date)) AS average_lead_time FROM order_table o JOIN delivery_table d ON o.order_id = d.order_id WHERE d.delivery_date IS NOT NULL AND o.order_date IS NOT NULL GROUP BY d.delivery_status ORDER BY average_lead_time DESC"
What similar products do other customers who bought the same items purchase?,"SELECT c.first_name,c.last_name,p.product_name FROM order_table o1 JOIN order_table o2 ON o1.product_id = o2.product_id AND o1.customer_id <> o2.customer_id JOIN customer_table c ON o1.customer_id  = c.customer_id JOIN product_table p ON o1.product_id = p.product_id GROUP BY c.first_name, c.last_name,p.product_name HAVING COUNT(DISTINCT o2.customer_id) >= 1"
How often do customers return to make additional purchases,"SELECT strftime('%Y-%m', order_date) AS week, CAST(COUNT(order_id) AS REAL) / COUNT(DISTINCT customer_id) AS purchase_frequency FROM order_table GROUP BY week"
Which customers have the fastest average delivery times across all their orders?,"SELECT c.first_name, AVG(JULIANDAY(d.delivery_date) - JULIANDAY(o.order_date)) AS avg_delivery_time FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id JOIN delivery_table d ON o.order_id = d.order_id GROUP BY c.first_name ORDER BY avg_delivery_time LIMIT 10"
Which merchants experience the highest percentage of delayed deliveries?,"SELECT m.merchant_name,CAST(COUNT(CASE WHEN d.delivery_status = 'Delayed' THEN d.delivery_id ELSE NULL END) AS REAL) * 100 / COUNT(d.delivery_id) AS delayed_delivery_percentage FROM merchant_table m JOIN order_table o ON m.merchant_id = o.merchant_id JOIN delivery_table d ON o.order_id = d.order_id GROUP BY m.merchant_name ORDER BY delayed_delivery_percentage DESC"
Merchants With the Most Transactions,"SELECT m.merchant_name,COUNT(o.order_id) AS total_transactions FROM merchant_table m JOIN order_table o ON m.merchant_id = o.merchant_id GROUP BY m.merchant_name ORDER BY total_transactions DESC;"
Daily Transaction Count,"SELECT STRFTIME('%Y-%m-%d', order_date) AS transaction_date, COUNT(order_id) AS total_transactions FROM order_table GROUP BY transaction_date ORDER BY transaction_date;"
Average Number of Transactions Per Customer,SELECT CAST(COUNT(order_id) AS REAL) / COUNT(DISTINCT customer_id) AS average_transactions_per_customer FROM order_table
Highest Spending Customers,"SELECT c.customer_id, c.first_name, c.last_name, SUM(o.total_price) AS total_spending FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY total_spending DESC LIMIT 10"
Most Frequently Returned Products,"SELECT p.product_name, COUNT(r.return_id) AS return_count FROM product_table p JOIN order_table o ON p.product_id = o.product_id JOIN return_table r ON o.order_id = r.order_id GROUP BY p.product_name ORDER BY return_count DESC LIMIT 10"
Most Popular Product by Orders,"SELECT p.product_name,COUNT(o.order_id) AS order_count FROM product_table p JOIN order_table o ON p.product_id = o.product_id GROUP BY p.product_name ORDER BY order_count DESC LIMIT 1"
Merchant Revenue Ranking,"SELECT m.merchant_name,SUM(o.total_price) AS total_revenue FROM merchant_table m JOIN order_table o ON m.merchant_id = o.merchant_id GROUP BY m.merchant_name ORDER BY total_revenue DESC"
What’s the average amount each customer spends per order,"SELECT c.customer_id,c.first_name,c.last_name,CAST(SUM(o.total_price) AS REAL) / COUNT(o.order_id) AS average_spending_per_order FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.first_name,c.last_name"
Which products are sold the most,"SELECT p.product_name, SUM(o.quantity) AS total_quantity_sold FROM product_table p JOIN order_table o ON p.product_id = o.product_id GROUP BY p.product_name ORDER BY total_quantity_sold DESC LIMIT 10"
What’s the refund rate for each merchant,"SELECT DISTINCT m.merchant_name,CAST(COUNT(r.return_id) AS REAL) * 100 / COUNT(o.order_id) AS refund_rate FROM merchant_table m JOIN order_table o ON m.merchant_id = o.merchant_id LEFT JOIN return_table r ON o.order_id = r.order_id GROUP BY m.merchant_name"
Which products generate the highest total profit?,"SELECT p.product_name,SUM(o.total_price - (o.quantity * p.price)) AS total_profit FROM product_table p JOIN order_table o ON p.product_id = o.product_id GROUP BY p.product_name ORDER BY total_profit DESC LIMIT 10"
Which customers have the highest refund percentage?,"SELECT c.customer_id,c.first_name,c.last_name,CAST(COUNT(r.return_id) AS REAL) * 100 / COUNT(o.order_id) AS refund_percentage FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id LEFT JOIN return_table r ON o.order_id = r.order_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY refund_percentage DESC LIMIT 10"
Get the first and last transaction date for each merchant,"SELECT m.merchant_name,MIN(o.order_date) AS first_transaction_date,MAX(o.order_date) AS last_transaction_date FROM merchant_table m JOIN order_table o ON m.merchant_id = o.merchant_id GROUP BY m.merchant_name"
Identify products that have not been sold in the last 3 months,"SELECT p.product_id, p.product_name FROM product_table p WHERE p.product_id NOT IN (SELECT DISTINCT o.product_id FROM order_table o WHERE o.order_date >= date('now', '-3 months')"
Get the three most popular products based on order count,"SELECT p.product_name,COUNT(o.order_id) AS order_count FROM product_table p JOIN order_table o ON p.product_id = o.product_id GROUP BY p.product_name ORDER BY order_count DESC LIMIT 3"
Identify customers who requested the most refunds,"SELECT c.customer_id,c.first_name,c.last_name,COUNT(r.return_id) AS refund_count FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id LEFT JOIN return_table r ON o.order_id = r.order_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY  refund_count DESC LIMIT 10"
Calculate the difference between a product’s price and the average price in its category,"SELECT p.product_name,p.price,a.avg_category_price,p.price - a.avg_category_price AS price_difference FROM product_table p JOIN (SELECT category, AVG(price) AS avg_category_price  FROM product_table GROUP BY category) a ON p.category = a.category"
Find the top 3 customers who spent the most on orders in the last 6 months,"SELECT c.customer_id,c.first_name,c.last_name,SUM(o.total_price) AS total_spending FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id WHERE o.order_date >= date('now', '-6 months')GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY total_spending DESC LIMIT 3"""
Find merchants whose monthly revenue increased consecutively for the last 3 months,"WITH MonthlyRevenue AS (SELECT m.merchant_id,strftime('%Y-%m', o.order_date) AS month,SUM(o.total_price) AS monthly_revenue FROM merchant_table m JOIN order_table o ON m.merchant_id = o.merchant_id GROUP BY m.merchant_id, month),RankedRevenue AS (SELECT merchant_id,month,monthly_revenue,LAG(monthly_revenue, 1, 0) OVER (PARTITION BY merchant_id ORDER BY month) AS prev_month_revenue,LAG(monthly_revenue, 2, 0) OVER (PARTITION BY merchant_id ORDER BY month) AS prev_2_month_revenue FROM MonthlyRevenue)SELECT merchant_id FROM RankedRevenue WHERE monthly_revenue > prev_month_revenue AND prev_month_revenue > prev_2_month_revenue AND prev_2_month_revenue > 0  GROUP BY merchant_id HAVING COUNT(DISTINCT month) >= 3"
Rank customers by their total number of orders and show only the top 10,"""SELECT c.customer_id,c.first_name,c.last_name,COUNT(o.order_id) AS total_orders FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY total_orders DESC LIMIT 10"
Calculate the percentage of refunded orders for each merchant,"SELECT m.merchant_name,CAST(COUNT(r.return_id) AS REAL) * 100 / COUNT(o.order_id) AS refund_percentage FROM merchant_table m JOIN order_table o ON m.merchant_id = o.merchant_id LEFT JOIN return_table r ON o.order_id = r.order_id GROUP BY  m.merchant_name"
Get the most popular product category by total sales ,"SELECT p.category,SUM(o.total_price) AS total_sales FROM product_table p JOIN order_table o ON p.product_id = o.product_id GROUP BY p.category ORDER BY total_sales DESC LIMIT 1"
Identify customers whose first order was their largest order,"WITH CustomerOrders AS (SELECT c.customer_id,c.first_name,c.last_name,o.order_id,o.order_date,o.total_price,ROW_NUMBER() OVER (PARTITION BY c.customer_id ORDER BY o.order_date) AS order_rank,MAX(o.total_price) OVER (PARTITION BY c.customer_id) as max_order_total FROM customer_table c JOIN order_table o ON c.customer_id = o.customer_id)SELECT customer_id,first_name,last_name FROM CustomerOrders WHERE order_rank = 1 AND total_price = max_order_total"
Determine the top-rated product for each merchant,"SELECT m.merchant_name, p.product_name, MAX(p.rating) AS top_rating FROM merchant_table m JOIN order_table o ON m.merchant_id = o.merchant_id JOIN product_table p ON o.product_id = p.product_id GROUP BY m.merchant_nameORDER BY top_rating DESC"
Which products receive the most five star ratings?,"SELECT p.product_name,COUNT(CASE WHEN p.rating = 5 THEN p.product_id ELSE NULL END) AS five_star_rating_count FROM product_table p GROUP BY p.product_name ORDER BY five_star_rating_count DESC LIMIT 10"
Monthly Shipping Delays,"SELECT strftime('%Y-%m', d.delivery_date) AS delivery_month,COUNT(CASE WHEN d.delivery_status = 'Delayed' THEN d.delivery_id ELSE NULL END) AS delayed_delivery_count FROM delivery_table d GROUP BY delivery_month ORDER BY delivery_month"
